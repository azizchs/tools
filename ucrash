#!/bin/bash -eu
#
# ucrash: Wrapper script for the crash tool to analyze Ubuntu kernel crashes.
#         Used in conjunction with upkg.
#

# -----------------------------------------------------------------------------
# Function declarations

function pr_info()
{
	printf "%-19s : %s\n" "${1}" "${2}"
}

function pr_error()
{
	echo -e "\e[0;31mError: ${*}\e[0m" >&2
	exit 1
}

function lookup_arch()
{
	case "${1,,}" in
		*s/390*)
			echo "s390x"
			;;
		*64-bit*powerpc*)
			echo "ppc64el"
			;;
		x86-64)
			echo "amd64"
			;;
		*)
			pr_error "Unknown architecture: ${1}"
			;;
	esac
}

function parse_dump_file()
{
	local filev arch upload

	filev="$(file "${DUMP_FILE}")"
	arch="${filev#* core file }"
	arch="${arch%%,*}"
	DUMP_ARCH="$(lookup_arch "${arch}")"

	pr_info "dump file"      "${DUMP_FILE}"
	pr_info "dump file arch" "${DUMP_ARCH}"
    
	# If a debug kernel was specified on the commandline, skip the parsing of
	# the dump file and assume it's the correct debug kernel
	if [ -n "${DEBUG_KERNEL}" ] ; then
		return
	fi

	if ! DUMP_LINUX_VERSION="$(strings "${DUMP_FILE}" | head -200000 | \
	           grep -m 1 '^Linux version ')" ; then
		pr_error "No Linux version found in dumpfile"
	fi

	DUMP_RELEASE="${DUMP_LINUX_VERSION##*Linux version }"
	DUMP_RELEASE="${DUMP_RELEASE%% *}"

	DUMP_FLAVOR="${DUMP_RELEASE##*-}"

	DUMP_BASE="${DUMP_RELEASE%%-*}"

	upload="${DUMP_LINUX_VERSION##* #}"
	upload="${upload%%-*}"
	upload="${upload%% *}"
	DUMP_SOURCE="${DUMP_RELEASE%-*}.${upload}"
    
	DUMP_VERSION="${DUMP_SOURCE}-${DUMP_FLAVOR}"

	pr_info "dump linux version"  "${DUMP_LINUX_VERSION}"
	pr_info "dump kernel release" "${DUMP_RELEASE}"
	pr_info "dump kernel flavor"  "${DUMP_FLAVOR}"
	pr_info "dump kernel base"    "${DUMP_BASE}"
	pr_info "dump kernel source"  "${DUMP_SOURCE}"
	pr_info "dump kernel version" "${DUMP_VERSION}"
}

function set_globals()
{
	if [ -n "${DEBUG_KERNEL}" ] ; then
		return
	fi

	# Kernel binary and source root directories
	KERNEL_BIN="${UPKG_DIR}/${DUMP_ARCH}/${DUMP_VERSION}"
	KERNEL_SRC="${UPKG_DIR}/all/${DUMP_SOURCE}"

	# Debug kernel, modules and system map
	DEBUG_KERNEL="${KERNEL_BIN}/usr/lib/debug/boot/vmlinux-${DUMP_RELEASE}"
	DEBUG_MODULES="${KERNEL_BIN}/usr/lib/debug/lib/modules/${DUMP_RELEASE}"
	SYSTEM_MAP="${KERNEL_BIN}/boot/System.map-${DUMP_RELEASE}"

	# Kernel source
	KERNEL_SOURCE="${KERNEL_SRC}/usr/src/linux-source-${DUMP_BASE}"

	pr_info "debug kernel"  "${DEBUG_KERNEL}"
	pr_info "debug modules" "${DEBUG_MODULES}"
	pr_info "system map"    "${SYSTEM_MAP}"
	pr_info "kernel source" "${KERNEL_SOURCE}"
}

function run_crash()
{
	local schroot_cmd schroot_list crash module rel_path src_file infile

	# We need to run in a schroot if the architecture of the dump file is
	# different from the host architecture
	SCHROOT=
	schroot_cmd=
	if [ "${DUMP_ARCH}" != "$(dpkg --print-architecture)" ] ; then
		# shellcheck disable=SC2012
		schroot_list=$(ls -1 /etc/schroot/chroot.d/* | sed -e 's,.*/,,' | \
                           grep "\-${DUMP_ARCH}$" || echo "")
		if [ -z "${schroot_list}" ] ; then
			pr_error "No schroot found for arch: ${DUMP_ARCH}"
		fi
		for SCHROOT in ${schroot_list} ; do
			[ "${SCHROOT#artful-}" = "${SCHROOT}" ] || break
			[ "${SCHROOT#zesty-}" = "${SCHROOT}" ] || break
			[ "${SCHROOT#xenial-}" = "${SCHROOT}" ] || break
		done
		schroot_cmd="schroot -c ${SCHROOT} --"
	fi

	# Make sure the crash tool is available
	if ! crash="$(${schroot_cmd} which crash)" ; then
		pr_error "Crash tool not found"
	fi

	CRASH_MODULE_PATH=
	CRASH_INFILE=
	if [ -n "${DEBUG_MODULES:-}" ] ; then
		CRASH_MODULE_PATH=${DEBUG_MODULES}

		# Get the build path of the kernel
		module=$(find "${DEBUG_MODULES}"/kernel/*/* -type f -name '*.ko' | \
                      head -1)
		rel_path=${module##*/kernel/}
		rel_path=${rel_path%/*}
		src_file=$(objdump --dwarf=decodedline "${module}" | \
					   grep "^/.*/${rel_path}/.*\.c:$" | head -1)
		BUILD_PATH=${src_file%/${rel_path}/*}

		pr_info "kernel build path" "${BUILD_PATH}"

		# Substitute the kernel build path with the real kernel source
		# directory so that gdb can find the source
		infile=$(mktemp .ucrash-XXXXXXXX)
		# shellcheck disable=SC2064
		trap "rm ${infile}" EXIT
		echo "gdb set substitute-path ${BUILD_PATH} ${KERNEL_SOURCE}" > \
             "${infile}"

		CRASH_INFILE="-i ${infile}"
	fi

	CRASH="${schroot_cmd} ${crash}"
	CRASH="${CRASH# }"
	CRASH_VERSION="$(${CRASH} --version | grep -m1 '^crash ' | \
		sed -e 's/crash //')"
	CRASH_EXTENSIONS="/usr/lib/crash/extensions"
	CRASHPAGER="/usr/bin/less -X -E"

	# Assemble the crash tool options
	CRASH_OPTS="${CRASH_OPTS} -x ${CRASH_INFILE} ${DEBUG_KERNEL} ${DUMP_FILE} ${SYSTEM_MAP}"
    
	pr_info "schroot"       "${SCHROOT}"
	pr_info "crash tool"    "${CRASH}"
	pr_info "crash version" "${CRASH_VERSION}"
	pr_info "crash export"  "CRASH_MODULE_PATH=${CRASH_MODULE_PATH}"
	pr_info "crash export"  "CRASH_EXTENSIONS=${CRASH_EXTENSIONS}"
	pr_info "crash export"  "CRASHPAGER=${CRASHPAGER}"
	pr_info "crash options" "${CRASH_OPTS[*]}"

	# Finally run crash
	if [ "${INFO}" -eq 0 ] ; then
		export CRASH_MODULE_PATH CRASH_EXTENSIONS CRASHPAGER
		${CRASH} "${CRASH_OPTS[@]}"
	fi
}

function usage()
{
	cat <<EOF
Usage: ucrash [-d] [-i] DUMP_FILE[@ADDRESS] [DEBUG_KERNEL]
       [[--] [CRASH_OPTIONS]]

Optional arguments:
  -d, --debug  Enable debugging output (set -x).
  -h, --help   Show this help text.
  -i, --info   Just show all the info without actually running crash.
EOF
}

# -----------------------------------------------------------------------------
# Main entry point

if [ "$(id -u)" -eq 0 ] ; then
	pr_error "You should not run as root"
fi

# upkg root directory
UPKG_DIR=${HOME}/.upkg

INFO=0
CRASH_OPTS=()
DUMP_FILE=
DEBUG_KERNEL=
SYSTEM_MAP=

# Parse the commandline
while [ $# -gt 0 ] ; do
	case "${1}" in
		-d|--debug)
			set -x;
			;;
		-h|--help)
			usage
			exit
			;;
		-i|--info)
			INFO=1
			;;
		--)
			shift
			CRASH_OPTS=("${@}")
			break
			;;
		-*)
			pr_error "Unexpected argument: ${1}"
			;;
		*)
			if [ -z "${DUMP_FILE}" ] ; then
				DUMP_FILE="${1}"
			elif [ -z "${DEBUG_KERNEL}" ] ; then
				DEBUG_KERNEL="${1}"
			else
				pr_error "Unexpected argument: ${1}"
			fi
			;;
	esac
	shift
done

if [ -z "${DUMP_FILE}" ] ; then
	usage
	exit 1
fi

if ! [ -e "${DUMP_FILE}" ] ; then
	pr_error "No such dump file: ${DUMP_FILE}"
fi
DUMP_FILE=$(readlink -e "${DUMP_FILE}")

if [ -n "${DEBUG_KERNEL}" ] ; then
	if ! [ -e "${DEBUG_KERNEL}"  ] ; then
		pr_error "No such debug kernel: ${DEBUG_KERNEL}"
	fi
	DEBUG_KERNEL=$(readlink -e "${DEBUG_KERNEL}")
fi

parse_dump_file
set_globals
run_crash
