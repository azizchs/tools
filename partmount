#!/bin/bash -eu
#
# Mount a partition of a disk image file
#

function out()
{
	local rc=$?

	trap - EXIT INT TERM HUP

	if [ "${rc}" -ne 0 ] ; then
		if [ "${MOUNTED}" -eq 1 ] ; then
			sudo umount "${MOUNTPOINT}"
		fi
		if [ "${DEL_MOUNTPOINT}" -eq 1 ] && [ -d "${MOUNTPOINT}" ] ; then
			rmdir "${MOUNTPOINT}"
		fi
		if [ -n "${NBD_DEVICE}" ] ; then
			sudo qemu-nbd -d "${NBD_DEVICE}"
		fi
	fi

	exit "${rc}"
}

function usage()
{
	cat <<EOF
Usage: partmount DEVICE PARTITION [MOUNTPOINT]
EOF
}

if [ $# -lt 2 ] ; then
	usage >&2
	exit 2
fi

image=${1}
partnum=${2}

MOUNTPOINT=${3:-}
DEL_MOUNTPOINT=0
NBD_DEVICE=
MOUNTED=0

if ! [ -e "${image}" ] ; then
	echo "No such image file: ${image}" >&2
	exit 2
fi

trap out INT TERM EXIT HUP

# Connect a qcow2 image to an nbd device
if file "${image}" | grep -q QCOW2 ; then
	# Load the nbd module
	lsmod | grep -q '\bnbd\b' || sudo modprobe nbd

	# Find an available nbd device
	for num in $(seq 0 16) ; do
		grep -q "\bnbd${num}\b" /proc/partitions || break
	done
	if [ "${num}" -eq 16 ] ; then
		echo "Failed to find an available nbd device"
		exit 1
	fi

	sudo qemu-nbd -n -c "/dev/nbd${num}" -f qcow2 "${image}"
	NBD_DEVICE=/dev/nbd${num}
fi

# Create the mount point if necessary
if [ -z "${MOUNTPOINT}" ] ; then
	DEL_MOUNTPOINT=1
	MOUNTPOINT=$(mktemp -p /tmp -d \
				 "partmount-XXXXXX-part${partnum}")
else
	if [ -d "${MOUNTPOINT}" ] ; then
		# Mountpoit exists already, so don't delete it
		DEL_MOUNTPOINT=0
	else
		DEL_MOUNTPOINT=1
		mkdir -p "${MOUNTPOINT}"
	fi
fi

if [ -n "${NBD_DEVICE}" ] ; then
	# Mount the partition
	if ! sudo mount "${NBD_DEVICE}p${partnum}" "${MOUNTPOINT}" ; then
		echo "Failed to mount partition: ${partnum}" >&2
		exit 1
	fi
else
	# Get the starting sector of the specified partition
	offset=$(partx -g -n "${partnum}" -o START "${image}")
	if [ -z "${offset}" ] ; then
		echo "Failed to find offset of partition: ${partnum}" >&2
		exit 1
	fi

	# Mount the partition
	if ! sudo mount -o loop,offset=$(("${offset}" * 512)) "${image}" \
		 "${MOUNTPOINT}" ; then
		echo "Failed to mount partition: ${partnum}" >&2
		exit 1
	fi
fi
MOUNTED=1

# Create the config file for partumount
config="/tmp/.partmount-$(readlink -e "${MOUNTPOINT}" | md5sum | sed 's, .*,,')"
cat << EOF > "${config}"
MOUNTPOINT=${MOUNTPOINT}
DEL_MOUNTPOINT=${DEL_MOUNTPOINT}
NBD_DEVICE=${NBD_DEVICE}
EOF

echo "Partition mounted on ${MOUNTPOINT}"
