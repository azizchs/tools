#!/bin/bash -eu
#
# Create a base libvirt guest VM
#

function print_var()
{
	for var in "${@}" ; do
		printf "%-13s: %s\n" "${var}" "${!var}"
	done
}

function download_fedora_image()
{
	local url pattern name

	if [ "${RELEASE}" -gt 27 ] ; then
		url=https://download.fedoraproject.org/pub/fedora/linux/releases/${RELEASE}/Cloud/${ARCH}/images
	else
		url=https://download.fedoraproject.org/pub/fedora/linux/releases/${RELEASE}/CloudImages/${ARCH}/images
	fi

	pattern="Fedora-Cloud-Base-${RELEASE}-.*.${ARCH}.qcow2"
	name=$(wget -q -O - "${url}" | \
			   sed -n -e 's/.*href="\([^"]*\).*/\1/p' | \
			   grep "${pattern}")

	url=${url}/${name}

	wget -O "${TMP_IMAGE}" "${url}"
}

function download_debian_image()
{
	local num name url release

	case "${RELEASE}" in
		jessie)  num=8 ;;
		stretch) num=9 ;;
	esac

	name=debian-${num}-openstack-${ARCH}.qcow2
	url=https://cdimage.debian.org/cdimage/openstack/current-${num}/${name}

	if wget -O "${TMP_IMAGE}" "${url}" ; then
		return
	fi

	url=https://cdimage.debian.org/cdimage/openstack/archive
	release=$(wget -q -O - "${url}" | \
				  sed -n -e "s,.* href=\"\(${num}\.[^/]*\).*,\1,p" | \
				  sort -V | tail -1)
	name=debian-${release}-openstack-${ARCH}.qcow2
	url=${url}/${release}/${name}

	wget -O "${TMP_IMAGE}" "${url}"
}

function download_ubuntu_image()
{
	local suffix name url

	suffix=
	if [ "${RELEASE}" = "precise" ] || [ "${RELEASE}" = "trusty" ] || \
		   [ "${RELEASE}" = "xenial" ] ; then
		suffix="-disk1"
		if [ "${UEFI}" -eq 1 ] ; then
			suffix="-uefi1"
		fi
	fi

	name=${RELEASE}-server-cloudimg-${ARCH}${suffix}.img
	url=https://cloud-images.ubuntu.com/${RELEASE}/current/${name}

	wget -O "${TMP_IMAGE}" "${url}"
}

function create_config_drive()
{
	local public_key tmpd

	public_key=$(cat ~/.ssh/id_rsa.pub)
	tmpd=$(mktemp -d)

	# meta data
	cat <<EOF >"${tmpd}/meta-data"
{ instance-id: $(uuidgen) }
EOF

	# user data
	cat <<EOF >"${tmpd}/user-data"
#cloud-config

hostname: ${NAME}.localdomain
manage_etc_hosts: localhost

chpasswd: { expire: false }
password: ${VENDOR}
ssh_authorized_keys: [ ${public_key} ]
ssh_pwauth: true

# Datasource timeout
max_wait: 10

# Set the hostname early on first boot
bootcmd:
  - [ cloud-init-per, once, hostname, hostname, ${NAME} ]

# Fix grub
# Note: early cloud-init (in Precise) doesn't understand 'write_files' so we
#       need to do it this way
runcmd:
  - |
    ! test -d /etc/default/grub.d && mkdir /etc/default/grub.d
    ! test -e /etc/default/grub.d/99-create-vm.cfg && \
    cat <<__EOF__ >/etc/default/grub.d/99-create-vm.cfg && update-grub
    unset GRUB_HIDDEN_TIMEOUT
    GRUB_TIMEOUT=2
    GRUB_CMDLINE_LINUX_DEFAULT="console=tty1 console=ttyS0"
    __EOF__
EOF

	genisoimage -ldots -allow-lowercase -allow-multidot -l -J -r \
				-o "${TMP_IMAGE}" -V cidata "${tmpd}"

	rm -rf "${tmpd}"
}


function define_vm()
{
	local tmpf uuid mac_addr uefi

	tmpf=$(mktemp)
	uuid=$(uuidgen -r)
	mac_addr="52:54:00:${uuid:0:2}:${uuid:2:2}:${uuid:4:2}"

	uefi=
	if [ "${UEFI}" -eq 1 ] ; then
		uefi="
    <loader readonly='yes' type='pflash'>/usr/share/OVMF/OVMF_CODE.fd</loader>
    <nvram>/var/lib/libvirt/qemu/nvram/${NAME}_VARS.fd</nvram>
"
	fi

	cat <<EOF >"${tmpf}"
<domain type='kvm'>
  <name>${NAME}</name>
  <uuid>$(uuidgen)</uuid>
  <memory unit='KiB'>524288</memory>
  <currentMemory unit='KiB'>524288</currentMemory>
  <vcpu placement='static'>1</vcpu>
  <resource>
    <partition>/machine</partition>
  </resource>
  <os>
    <type arch='x86_64' machine='pc'>hvm</type>
${uefi}
    <boot dev='hd'/>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <clock offset='utc'/>
  <on_poweroff>destroy</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
  <devices>
    <emulator>/usr/bin/kvm-spice</emulator>

    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='${IMAGE}'/>
      <target dev='vda' bus='virtio'/>
      <alias name='virtio-disk0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>
    </disk>

    <disk type='file' device='disk'>
      <driver name='qemu' type='raw'/>
      <source file='${CONFIG_DRIVE}'/>
      <target dev='vdb' bus='virtio'/>
      <alias name='virtio-disk1'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
    </disk>

    <controller type='usb' index='0' model='piix3-uhci'>
      <alias name='usb'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/>
    </controller>

    <controller type='pci' index='0' model='pci-root'>
      <alias name='pci.0'/>
    </controller>

    <interface type='network'>
      <mac address='${mac_addr}'/>
      <source network='default' bridge='virbr0'/>
      <target dev='vnet0'/>
      <model type='virtio'/>
      <alias name='net0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
    </interface>

    <serial type='pty'>
      <source path='/dev/pts/0'/>
      <target type='isa-serial' port='0'>
        <model name='isa-serial'/>
      </target>
      <alias name='serial0'/>
    </serial>

    <console type='pty' tty='/dev/pts/0'>
      <source path='/dev/pts/0'/>
      <target type='serial' port='0'/>
      <alias name='serial0'/>
    </console>

    <input type='mouse' bus='ps2'>
      <alias name='input0'/>
    </input>

    <input type='keyboard' bus='ps2'>
      <alias name='input1'/>
    </input>

    <graphics type='vnc' port='5900' autoport='yes' listen='127.0.0.1'>
      <listen type='address' address='127.0.0.1'/>
    </graphics>

    <video>
      <model type='cirrus' vram='16384' heads='1' primary='yes'/>
      <alias name='video0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0'/>
    </video>

    <memballoon model='virtio'>
      <alias name='balloon0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/>
    </memballoon>

  </devices>
</domain>
EOF

	virsh define "${tmpf}"
	rm -f "${tmpf}"
}


function usage()
{
	cat <<EOF
Usage: create-vm [-a ARCH] [-d] [-f] [-h] [-u] DIST [NAME]

Create a libvirt guest VM.

Positional arguments:
  DIST  A recognized distrbution, like bionic, stretch, fedora-26, ...
  NAME  The libvirt domain name, defaults to <DIST>[-uefi][-<ARCH>] if not
        specified.

Optional arguments:
  -a, --arch ARCH  Architecture of the VM (defaults to the host architecture).
  -d, --debug      Enable debugging (set -x).
  -f, --force      Force the recreation of an existing VM.
  -h, --help       Show this help text.
  -s, --size GB    Image size in GB. If not specified, defaults to 8(GB).
  -u, --uefi       Configure the VM to boot from UEFI.
EOF
}


# -----------------------------------------------------------------------------
# Main entry point

ARCH=
FORCE=0
UEFI=0
DIST=
NAME=
SIZE=8

while [ ${#} -gt 0 ] ; do
	case ${1} in
		-a|--arch)
			ARCH=${2}
			shift
			;;
		-d|--debug)
			set -x
			;;
		-f|--force)
			FORCE=1
			;;
		-h|--help)
			usage
			exit 2
			;;
		-s|--size)
			SIZE=${2}
			shift
			;;
		-u|--uefi)
			UEFI=1
			;;
		-*)
			echo "Unexpected option: ${1}" >&2
			exit 2
			;;
		*)
			if [ -z "${DIST}" ] ; then
				DIST=${1}
			elif [ -z "${NAME}" ] ; then
				NAME=${1}
			else
				echo "Unexpected argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${DIST}" ] ; then
	usage
	exit 2
fi

# -----------------------------------------------------------------------------
# Set global variables

# The image vendor and release
case "${DIST}" in
	*-*)
		VENDOR=${DIST%-*}
		RELEASE=${DIST#*-}
		;;
    jessie|stretch)
        VENDOR=debian
		RELEASE=${DIST}
        ;;
    *)
        VENDOR=ubuntu
        RELEASE=${DIST}
        ;;
esac

# The name of the VM
if [ -z "${NAME}" ] ; then
	NAME=${VENDOR}-${RELEASE}
	if [ ${UEFI} -eq 1 ] ; then
		NAME=${NAME}-uefi
	fi
	if [ -n "${ARCH}" ] ; then
		NAME=${NAME}-${ARCH}
	fi
fi

# The vendor specific architecture name
case "${VENDOR}" in
	fedora|centos)
		if [ -z "${ARCH}" ] ; then
			ARCH=$(dpkg-architecture -q DEB_HOST_GNU_CPU)
		fi
		;;
	*)
		if [ -z "${ARCH}" ] ; then
			ARCH=$(dpkg-architecture -q DEB_HOST_ARCH)
		fi
		;;
esac

# The image directory and image and config filenames
IMAGE_DIR=/var/lib/libvirt/images
IMAGE=${IMAGE_DIR}/${NAME}.qcow2
CONFIG_DRIVE=${IMAGE_DIR}/${NAME}-config.iso

# Sanity check
if [ "${RELEASE}" = "precise" ] && [ "${UEFI}" -eq 1 ] ; then
	echo "Precise does not support boot from UEFI"
	exit 1
fi

print_var ARCH FORCE DIST IMAGE_DIR IMAGE CONFIG_DRIVE NAME RELEASE VENDOR
echo

# -----------------------------------------------------------------------------
# Purge existing VM

if virsh vcpuinfo "${NAME}" >/dev/null 2>&1 ; then
	if [ "${FORCE}" -eq 0 ] ; then
		echo "VM '${NAME}' exists already. Use -f, --force to recreate it."
		exit 1
	fi
	virsh destroy "${NAME}" || true
	virsh vol-delete "${IMAGE}" || true
	virsh vol-delete "${CONFIG_DRIVE}" || true
	virsh undefine "${NAME}" || true
fi

# -----------------------------------------------------------------------------
# Create a temporary image file

TMP_IMAGE=$(mktemp)
# shellcheck disable=SC2064
trap "rm -f ${TMP_IMAGE}" EXIT INT TERM HUP

# -----------------------------------------------------------------------------
# Download and resize the cloud image

download_"${VENDOR}"_image
qemu-img resize "${TMP_IMAGE}" "${SIZE}"G
sudo mv "${TMP_IMAGE}" "${IMAGE}"

# -----------------------------------------------------------------------------
# Create the config drive

create_config_drive
sudo mv "${TMP_IMAGE}" "${CONFIG_DRIVE}"

# -----------------------------------------------------------------------------
# Define the VM

define_vm
