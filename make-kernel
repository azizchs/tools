#!/bin/bash -eu
#
# Build a kernel in a chroot
#

function usage()
{
	cat << EOF
Usage: make-kernel [options] [target]

Available options:
  -a, --arch ARCH  Build kernel for arch ARCH
  -h, --help       Show this help text
  -j NUM           Build in parallel using NUM cpus
EOF
	exit 2
}

if ! [ -e Makefile ] ; then
	echo "Error: No such file 'Makefile'"
	exit 1
fi

if ! [ -e .config ] ; then
	echo "Error: No such file '.config'"
	exit 1
fi

version=$(awk '/^VERSION = / { print $3 ; exit }' Makefile)
patchlevel=$(awk '/^PATCHLEVEL = / { print $3 ; exit }' Makefile)

# Which schroot to use, based on kernel version
case "${version}.${patchlevel}" in
	3.[0-9])
		schroot=wheezy
		;;
	3.[1-9][0-9])
		schroot=trusty
		;;
	4.[0-9])
		schroot=xenial
		;;
	*)
		schroot=artful
		;;
esac

# Schroot architecture
if grep -q 'CONFIG_X86_32=y' .config ; then
	schroot="${schroot}-i386"
else
	schroot="${schroot}-amd64"
fi	

# FIXME: RHEL special case
if grep -q 'RH_KABI' .config ; then
	schroot=centos-7-x86_64
fi

# Commandline options
arch=
j=$(getconf _NPROCESSORS_ONLN)
target=

while [ $# -gt 0 ] ; do
	case "${1}" in
		-a|--arch)
			shift
			arch=${1}
			;;
		-h|--help)
			usage
			;;
		-j)
			shift
			j=${1}
			;;
		-*)
			echo "Error: Unknown option: ${1}"
			exit 1
			;;
		*)
			target=${1}
			;;
	esac
	shift
done

# Are we cross-compiling?
if [ -n "${arch}" ] ; then
	case "${arch}" in
		ppc64el)
			ARCH=powerpc
			TARGET=${target:-vmlinux}
			;;
		powerpc)
			ARCH=powerpc
			TARGET=${target:-zImage}
			;;
		*)
			echo "Error: Unsupported arch '${arch}'"
			exit 1
			;;
	esac

	CROSS_COMPILE="$(dpkg-architecture -a "${arch}" -q DEB_HOST_GNU_TYPE)-"
	export ARCH CROSS_COMPILE
fi

TARGET=${TARGET:-${target}}
TARGET=${TARGET:-bzImage}

export LANG=
export LC_TIME=POSIX
export LC_MONETARY=POSIX
export LC_COLLATE=POSIX
export LC_ADDRESS=POSIX
export LC_TELEPHONE=POSIX
export LC_NAME=POSIX
export LC_MEASUREMENT=POSIX
export LC_IDENTIFICATION=POSIX
export LC_NUMERIC=POSIX
export LC_PAPER=POSIX

echo "Using schroot ${schroot} for the build"
echo schroot -c "${schroot}" -- make "-j${j}" "${TARGET}"
schroot -c "${schroot}" -- make "-j${j}" "${TARGET}"
