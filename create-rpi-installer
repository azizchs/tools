#!/bin/bash -eu
#
# Create an installer kernel and initrd for Raspberry Pi
#

function out()
{
	local rc=$?

	trap - INT EXIT TERM HUP

	partumount "${TMP_DIR}"/boot/firmware || true
	partumount "${TMP_DIR}" || true
	rmdir "${TMP_DIR}" || true

	rm -rf "${INITRD_DIR}" "${OUT_DIR}"

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function usage()
{
	cat <<EOF
Usage: create-rpi-installer [-h] IMAGE

Create a Raspberry Pi installer kernel and initrd.

Positional arguments:
  IMAGE       The image from which to extract the kernel, initrd and DTBs to
              use as the base for the installer.

Optional arguments:
  -h, --help  Show this help text and exit.
EOF
}

image=

while [ $# -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		*)
			if [ -z "${image}" ]; then
				image=${1}
			else
				usage
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${image}" ] ; then
	usage
	exit 2
fi

if ! [ -e "${image}" ] ; then
	echo "No such image file: ${image}" >&2
	exit 1
fi

TMP_DIR=$(mktemp -d)
INITRD_DIR=$(mktemp -d)
OUT_DIR=$(mktemp -d)
trap out INT TERM EXIT HUP

# Mount the image
partmount "${image}" 2 "${TMP_DIR}"
partmount "${image}" 1 "${TMP_DIR}"/boot/firmware

here=$(pwd)
cd "${INITRD_DIR}"

# Extract the initrd
lz4cat "${TMP_DIR}"/boot/firmware/initrd.img | cpio -i

# Inject the installer init script
cat <<EOF > init
#!/bin/sh

echo "--- Loading installer initrd ..."

[ -d /dev ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
[ -d /tmp ] || mkdir /tmp
mkdir -p /var/lock
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t proc -o nodev,noexec,nosuid proc /proc

mount -t devtmpfs -o nosuid,mode=0755 udev /dev
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true

# Get an IP
dhclient

# The location of the installer and images
server=192.168.99.11/~juergh

# Download and run the installer
wget \${server}/install-rpi-image && \
    /bin/sh ./install-rpi-image \${server} && \
    reboot -f && \
    exit 0

# Fall-back
/bin/sh
EOF
chmod 755 init

mkdir -p "${OUT_DIR}"/install

# Recreate the initrd and copy the dtbs and other files required by the
# Raspberry Pi firmware
find . | cpio -H newc -o | gzip -9 > "${OUT_DIR}"/install/initrd.img
cp "${TMP_DIR}"/boot/firmware/vmlinuz "${TMP_DIR}"/boot/firmware/*.dtb \
   "${TMP_DIR}"/boot/firmware/README "${TMP_DIR}"/boot/firmware/cmdline.txt \
   "${OUT_DIR}"/install

# Create the installer config snippet
cat <<EOF >"${OUT_DIR}"/installcfg.txt
[all]
[gpio4=0]
os_prefix=install/
kernel=vmlinuz
initramfs initrd.img
EOF

cd "${OUT_DIR}"
tar -czvf "${here}"/rpi-installer.tgz .
