#!/bin/bash -eu
#
# Search the linux 'Fixes:' file for commits that fix the given commit(s).
#

LINUX_FIXES=/srv/git/linux.fixes
LINUX_REPO=/srv/git/linux.git

function find_fixes()
{
	local commit=${1} indent=${2}
	local fixes fix

	readarray -t fixes < <(grep -P "__FIXES__\s+${commit::12}" "${LINUX_FIXES}")

	for fix in "${fixes[@]}" ; do
		# We found a match so print the original commit
		if [ -n "${ONELINE}" ] ; then
			echo "${ONELINE}"
			ONELINE=
		fi

		printf "%0.s " $(seq "${indent}")
		echo "${fix%% __FIXES__*}"
		find_fixes "${fix%% *}" "$((indent + 2))"
	done
}

function find_upstream_ref()
{
	local path=${1} commit=${2}
    local pattern_list pattern found

    pattern_list=(
        "commit [0-9a-f]* upstream"
        "upstream commit [0-9a-f]*"
        "cherry[ -]?picked from .*\b[0-9a-f]*"
        "back[ -]?ported from .*\b[0-9a-f]*"
    )
    pattern=$(printf "|%s" "${pattern_list[@]}")
    pattern=${pattern:1}

    found=$(git -C "${path}" log --format="%b" "${commit}" -1 | \
                grep -iP "${pattern}" | \
                grep -oP '[0-9a-f]{12,}' | head -1 | tr -d '\n' || true)

    echo "${found}"
}

function usage()
{
	cat <<EOF
Usage: find-linux-fixes [-h] [-d DIR] COMMIT [COMMIT ...]

Find 'Fixes:' commits in the main Linux repo (Linus' repo) for the specified
COMMIT(s).

Optional arguments:
  -h, --help     Show this help text and exit.
  -d, --dir DIR  If a provided commit is not found in Linus' repo, try to look
                 it up in <DIR> and parse its commit message for a reference to
                 the original upstream commit. If found, find 'Fixes:' commits
                 for that upstream commit.
EOF
}

path=
commits=()

while [ $# -gt 0 ] ; do
    case "${1}" in
        -h|--help)
            usage
            exit
            ;;
		-d|--dir)
			shift
			path=${1}
			;;
        -*)
            echo "Unexpected argument: ${1}" 1>&2
            exit 1
            ;;
        *)
			commits=("${@}")
			break
            ;;
    esac
    shift
done

# Verify that path is a valid git repo
if [ -n "${path}" ] && \
   ! git -C "${path}" rev-parse --inside-work-tree >/dev/null 2>&1 ; then
	echo "Error: ${path} is not a valid git repo"
	exit
fi

for commit in "${commits[@]}" ; do
	ONELINE=$(git --git-dir="${LINUX_REPO}" log --format='%h %s' \
				  "${commit}" -1 2>/dev/null || true)

	if [ -z "${ONELINE}" ] ; then
		if [ -z "${path}" ] ; then
			echo "Error: Commit ${commit} not found in Linus' repo"
			continue
		fi

		# Check if the commit exists in the provided repo
		if ! git -C "${path}" cat-file -e "${commit}^{commit}" 2>/dev/null ; then
			echo "Error: Commit ${commit} not found in Linus' repo nor in" \
				 "'${path}'"
			continue
		fi

		# Try to find an upstream commit reference in the commit message
		upstream=$(find_upstream_ref "${path}" "${commit}")
		if [ -z "${upstream}" ] ; then
			echo "Error: Commit ${commit} found in '${path}' but doesn't" \
				 "contain an upstream reference"
			continue
		fi

		# Get the subject of the upstream commit from Linus' repo
		ONELINE=$(git --git-dir="${LINUX_REPO}" log --format='%h %s' \
					  "${upstream}" -1 2>/dev/null || true)
		if [ -z "${ONELINE}" ] ; then
			echo "Error: Commit ${commit} found in '${path}' and contains" \
				 "an upstream reference (${upstream::12}) which is not found" \
				 "in Linus' repo"
			continue
		fi

		# Make it clear that we're processing a different commit
		ONELINE="${commit::12} -> [upstream] ${ONELINE}"
		commit=${upstream}
	fi

	find_fixes "${commit}" 2
done
