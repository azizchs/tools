#!/bin/bash -eu
#
# upkg: Package manager for Ubuntu kernel (image, debug and source) packages.
#       Used in conjunction with ucrash.
#

# -----------------------------------------------------------------------------
# Helper functions

function verify_pkg_index()
{
	# Verify that the package index is valid
	# shellcheck disable=SC2012
	if  ! [[ "${PKG_INDEX}" =~ ^[0-9]+$ ]] || \
		  [ "${PKG_INDEX}" -lt 1 ] || \
		  [ "${PKG_INDEX}" -gt "$(ls -1d "${UPKG_DIR}"/*/* | wc -l)" ] ; then
		echo "Error: Invalid package index: ${PKG_INDEX}" >&2
		exit 1
	fi
}

function install_pkg_files()
{
	local pkg_file package version arch flavor manifest inst_dir

	for pkg_file in "${PKG_FILES[@]}" ; do
		# shellcheck disable=SC2016
		package=$(dpkg-deb --show --showformat='${Package}' "${pkg_file}")
		# shellcheck disable=SC2016
		version=$(dpkg-deb --show --showformat='${Version}' "${pkg_file}")
		# shellcheck disable=SC2016
		arch=$(dpkg-deb --show --showformat='${Architecture}' "${pkg_file}")

		case "${package}" in
			linux-image-*-dbgsym)
				flavor=${package#linux-image-*-}
				flavor=${flavor#*-}
				flavor=-${flavor%-dbgsym}
				manifest=.dbg
				;;
			linux-image-*)
				flavor=${package#linux-image-*-}
				flavor=-${flavor#*-}
				manifest=.img
				;;
			linux-modules-*)
				flavor=${package#linux-modules-*-}
				flavor=-${flavor#*-}
				manifest=.mod
				;;
			linux-source-*)
				flavor=
				manifest=.src
				;;
			*)
				echo "Error: Unrecognized package: ${pkg_file}" >&2
				exit 1
				;;
		esac

		# The package installation directory
		inst_dir=${UPKG_DIR}/${arch}/${version}${flavor}

		# Install it
		echo -n "Installing package ${pkg_file##*/} ... "
		mkdir -p "${inst_dir}"
		dpkg-deb -x "${pkg_file}" "${inst_dir}"
		touch "${inst_dir}/${manifest}"
		echo "done"

		# Unpack the source tarball
		tarball_dir=${inst_dir}/usr/src
		tarball=${tarball_dir}/${package}.tar.bz2
		if [ -e  "${tarball}" ] ; then
			echo -n "Extracting source tarball ${tarball##*/} ... "
			tar -C "${tarball_dir}" -xaf "${tarball}"
			echo "done"

			# Delete the tarball to save some space
			rm -f "$(readlink -f "${tarball}")" "${tarball}"
		fi
	done
}

function list_pkgs()
{
	local fmt num inst_dir arch version flavor dbg img mod src

	fmt="%3s   %-7s   %-20s   %-10s   %3s   %3s   %3s   %3s\n"

	# shellcheck disable=SC2059
	printf "${fmt}" "Idx" "Arch" "Version" "Flavor" "Dbg" "Img" "Mod" "Src"
	echo "-------------------------------------------------------------------------"

	num=1
	# shellcheck disable=SC2035
	for inst_dir in $(cd "${UPKG_DIR}" && ls -1d */* 2>/dev/null) ; do
		arch=${inst_dir%/*}
		arch=${arch##*/}
		version=${inst_dir##*/}

		if [ "${arch}" = "all" ] ; then
			flavor=
		else
			flavor=${version#*-}
			flavor=${flavor#*-}
			version=${version%-${flavor}}
		fi

		[ -f "${UPKG_DIR}/${inst_dir}/.dbg" ] && dbg=" * " || dbg=
		[ -f "${UPKG_DIR}/${inst_dir}/.img" ] && img=" * " || img=
		[ -f "${UPKG_DIR}/${inst_dir}/.mod" ] && mod=" * " || mod=
		[ -f "${UPKG_DIR}/${inst_dir}/.src" ] && src=" * " || src=

		# shellcheck disable=SC2059
		printf "${fmt}" "${num}" "${arch}" "${version}" "${flavor}" \
			   "${dbg}" "${img}" "${mod}" "${src}"

		num=$((num + 1))
	done
}


function list_pkgs_files()
{
	local inst_dir

	verify_pkg_index

	# shellcheck disable=SC2012
	inst_dir=$(ls -1d "${UPKG_DIR}"/*/* | head "-${PKG_INDEX}" | tail -1)
	find "${inst_dir}" | sed "s,^${UPKG_DIR}/,,"
}

# -----------------------------------------------------------------------------
# Command functions

function do_download()
{
	local base rev abi pkg_files pkg_file pkg_file_path

	if [ "${#CMD_ARGS[@]}" -ne 1 ] ; then
		usage
		exit 2
	fi

	if ! [ -d "${PKG_DIR}" ] ; then
		echo "Error: No such target directory: ${PKG_DIR}" >&2
		exit 1
	fi

	PKG_VERSION=${CMD_ARGS[0]}

	base=${PKG_VERSION%%-*}
	rev=${PKG_VERSION#*-}
	abi=${base}-${rev%%.*}

	pkg_files=(
		"linux-image-unsigned-${abi}-${FLAVOR}-dbgsym_${PKG_VERSION}_${ARCH}.ddeb"
		"linux-image-${abi}-${FLAVOR}-dbgsym_${PKG_VERSION}_${ARCH}.ddeb"
		"linux-image-unsigned-${abi}-${FLAVOR}_${PKG_VERSION}_${ARCH}.deb"
		"linux-image-${abi}-${FLAVOR}_${PKG_VERSION}_${ARCH}.deb"
		"linux-modules-${abi}-${FLAVOR}_${PKG_VERSION}_${ARCH}.deb"
		"linux-source-${base}_${PKG_VERSION}_all.deb"
	)

	PKG_FILES=()
	for pkg_file in "${pkg_files[@]}" ; do
		pkg_file_path=${PKG_DIR}/${pkg_file}
		if [ -e "${pkg_file_path}" ] ; then
			echo "Skipping ${pkg_file} (already exists)"
			PKG_FILES+=("${pkg_file_path}")
			continue
		fi

		echo -n "Downloading ${pkg_file}  ... "
		if wget -q -O "${pkg_file_path}" \
				"${ARCHIVE_URL}/${pkg_file}" ; then
			echo "done"
			PKG_FILES+=("${pkg_file_path}")
		else
			rm -f "${PKG_DIR}/${pkg_file}"
			echo "failed"
		fi
	done
}

function do_install()
{
	if [ "${#CMD_ARGS[@]}" -eq 0 ] ; then
		usage
		exit 2
	elif [ -f "${CMD_ARGS[0]}" ] ; then
		PKG_FILES=("${CMD_ARGS[@]}")
	else
		PKG_DIR=$(mktemp -d)
		# shellcheck disable=SC2064
		trap "rm -rf ${PKG_DIR}" EXIT INT TERM HUP
		do_download
	fi

	install_pkg_files
}

function do_list()
{
	if [ "${#CMD_ARGS[@]}" -eq 0 ] ; then
		list_pkgs
	elif [ "${#CMD_ARGS[@]}" -eq 1 ] ; then
		PKG_INDEX=${CMD_ARGS[0]}
		list_pkgs_files
	else
		usage
		exit 2
	fi
}

function do_remove()
{
	local inst_dir

	if [ "${#CMD_ARGS[@]}" -ne 1 ] ; then
		usage
		exit 2
	fi

	PKG_INDEX=${CMD_ARGS[0]}
	verify_pkg_index

	# shellcheck disable=SC2012
	inst_dir=$(ls -1d "${UPKG_DIR}"/*/* | head -"${PKG_INDEX}" | tail -1)

	echo -n "Removing package(s) ... "
	rm -rf "${inst_dir}"
	rmdir "${inst_dir%/*}" 2>/dev/null || true
	echo "done"
}

function usage()
{
	cat <<EOF
Usage: upkg [-a ARCH] [-d DIR] [-f FLAVOR] [-h] [-x] COMMAND [ARGS]

Ubuntu kernel (debug) package manager.

Available commands:
  download PKG_VERSION  Download the packages with packge version PKG_VERSION
                        from the archive.
  install PKG_VERSION | PKG_FILE [PKG_FILE ...]
                        Download and install the packages with package version
                        PKG_VERSION from the archive or install the local
                        install the local packages PKG_FILE [PKG_FILE ...].
  list [PKG_INDEX]      List all installed packages or, if PKG_INDEX is
                        specified, the files provided by the package(s) with
                        the index PKG_INDEX.
  remove PKG_INDEX      Remove the package(s) with the index PKG_INDEX.

Optional arguments:
  -a, --arch ARCH      Download the packages for kernel architecture ARCH
                       (defaults to ${ARCH}).
  -d, --dir DIR        Target directory for downloaded files (defaults to ./).
  -f, --flavor FLAVOR  Download the binary package for flavor FLAVOR (defaults
                       to generic).
  -h, --help           Show this help.
EOF
}

# -----------------------------------------------------------------------------
# Main entry point

if [ "$(id -u)" = "0" ] ; then
	echo "Error: You should not run as root" >&2
	exit 1
fi

# upkg root directory
UPKG_DIR=${HOME}/.upkg
[ -d "${UPKG_DIR}" ] || mkdir -p "${UPKG_DIR}"

# Archive download URL
ARCHIVE_URL="https://launchpad.net/ubuntu/+archive/primary/+files/"

ARCH=$(dpkg --print-architecture)
CMD=
CMD_ARGS=
FLAVOR=generic
PKG_DIR=${PWD}

# Parse the commandline options
while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-a|--arch)
			shift
			ARCH="${1}"
			;;
		-f|--flavor)
			shift
			FLAVOR="${1}"
			;;
		-h|--help)
			usage
			exit
			;;
		-d|--dir)
			shift
			PKG_DIR="${1}"
			;;
		download|install|list|remove)
			CMD="${1}"
			shift
			CMD_ARGS=("${@}")
			break
			;;
		*)
			echo "Error: Unexpected argument: ${1}" >&2
			exit 2
			;;
	esac
	shift
done

if [ -z "${CMD}" ] ; then
	usage
	exit 2
fi

"do_${CMD}"
