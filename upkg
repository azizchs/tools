#!/bin/bash -eu
#
# upkg: Package manager for Ubuntu kernel (image, debug and source) packages.
#       Used in conjunction with ucrash.
#

# -----------------------------------------------------------------------------
# Helper functions

function verify_pkg_idx()
{
	# Verify that the package index is valid
	# shellcheck disable=SC2012
	if  ! [[ "${PKG_INDEX}" =~ ^[0-9]+$ ]] || \
		  [ "${PKG_INDEX}" -lt 1 ] || \
		  [ "${PKG_INDEX}" -gt "$(ls -1d "${UPKG_DIR}"/*/* | wc -l)" ] ; then
		echo "Error: Invalid package index: ${PKG_INDEX}" >&2
		exit 1
	fi
}

function install_pkg()
{
	local package version arch flavor sub_dir inst_dir tarball_dir tarball

	# shellcheck disable=SC2016
	package=$(dpkg-deb --show --showformat='${Package}' "${PKG_FILE}")
	# shellcheck disable=SC2016
	version=$(dpkg-deb --show --showformat='${Version}' "${PKG_FILE}")
	# shellcheck disable=SC2016
	arch=$(dpkg-deb --show --showformat='${Architecture}' "${PKG_FILE}")

	case ${package} in
		linux-image-*-dbgsym)
			flavor=${package%-dbgsym}
			flavor=-${flavor##*-}
			sub_dir=usr/lib/debug/lib/modules
			;;
		linux-image-*)
			flavor=-${package##*-}
			sub_dir=lib/modules
			;;
		linux-source-*)
			flavor=
			sub_dir=usr/src
			;;
		*)
			echo "Error: Unrecognized package type: ${PKG_FILE}" >&2
			exit 1
			;;
	esac

	echo "Package name	  : ${package}"
	echo "Package version : ${version}"
	echo "Package arch	  : ${arch}"
	echo "Flavor name	  : ${flavor}"

	inst_dir=${UPKG_DIR}/${arch}/${version}${flavor}

	# Check if the package is already installed
	if [ -d "${inst_dir}/${sub_dir}" ] ; then
		if [ "${FORCE}" -eq 0 ] ; then
			echo "Error: Package is already installed" >&2
			echo "	     Use --force to reinstall it" >&2
			exit 1
		else
			rm -rf "${inst_dir:?}/${sub_dir}"
		fi
	fi

	# Install it
	echo -n "Installing package ... "
	mkdir -p "${inst_dir}"
	dpkg-deb -x "${PKG_FILE}" "${inst_dir}"
	echo "done"

	# Unpack the source tarball
	tarball_dir=${inst_dir}/${sub_dir}
	tarball=${tarball_dir}/${package}.tar.bz2
	if [ -e  "${tarball}" ] ; then
		echo -n "Extracting source tarball ... "
		tar -C "${tarball_dir}" -xaf "${tarball}"
		echo "done"

		# Delete the tarball to save some space
		rm -f "$(readlink -f "${tarball}")" "${tarball}"
	fi
}


# -----------------------------------------------------------------------------
# Command functions

function do_download()
{
	local base rev abi dbg img src

	if ! [ -d "${TARGET}" ] ; then
		echo "Error: No such target directory: ${TARGET}" >&2
		exit 1
	fi

	base=${PKG_VERSION%%-*}
	rev=${PKG_VERSION#*-}
	abi=${base}-${rev%%.*}

	dbg=linux-image-${abi}-${FLAVOR}-dbgsym_${PKG_VERSION}_${ARCH}.ddeb
	img=linux-image-${abi}-${FLAVOR}_${PKG_VERSION}_${ARCH}.deb
	src=linux-source-${base}_${PKG_VERSION}_all.deb

	for pkg in ${dbg} ${img} ${src} ; do
		if [ -e "${TARGET}/${pkg}" ] ; then
			echo "Skipping ${pkg} (exists already)"
		else
			echo -n "Downloading ${pkg} to directory ${TARGET} ... "
			( cd "${TARGET}" && wget -q "${ARCHIVE_URL}/${pkg}" ) || \
				( echo "failed" ; exit 1 )
			echo "done"
		fi
	done
}

function do_install()
{
	# Install a single package
	if [ -n "${PKG_FILE}" ] ; then
		if ! [ -e "${PKG_FILE}" ] ; then
			echo "Error: No such package file: ${PKG_FILE}" >&2
			exit 1
		fi
		install_pkg

	# Otherwise download the set of packages from the archive and install them
	# afterwards
	else
		TARGET=$(mktemp -d)
		# shellcheck disable=SC2064
		trap "rm -rf ${TARGET}" INT TERM EXIT

		do_download
		for PKG_FILE in "${TARGET}"/* ; do
			install_pkg
		done
	fi
}

function do_list()
{
	local fmt num sub_dir arch version flavor dbg img src

	fmt="%3s   %-7s   %-20s   %-10s   %3s   %3s   %3s\n"

	# shellcheck disable=SC2059
	printf "${fmt}" "Idx" "Arch" "Version" "Flavor" "Dbg" "Img" "Src"
	echo "-------------------------------------------------------------------"

	num=1
	# shellcheck disable=SC2035
	for sub_dir in $(cd "${UPKG_DIR}" && ls -1d */* 2>/dev/null) ; do
		arch=${sub_dir%/*}
		version=${sub_dir#*/}
		if [ "${arch}" = "all" ] ; then
			flavor=
		else
			flavor=${version##*-}
			version=${version%-*}
		fi

		dbg=
		if [ -d "${UPKG_DIR}/${sub_dir}/usr/lib/debug/lib/modules" ] ; then
			dbg=" * "
		fi

		img=
		if [ -d "${UPKG_DIR}/${sub_dir}/lib/modules" ] ; then
			img=" * "
		fi

		src=
		if [ -d "${UPKG_DIR}/${sub_dir}/usr/src" ] ; then
			src=" * "
		fi

		# shellcheck disable=SC2059
		printf "${fmt}" "${num}" "${arch}" "${version}" "${flavor}" \
			   "${dbg}" "${img}" "${src}"

		num=$((num + 1))
	done
}

function do_listfiles()
{
	local inst_dir

	verify_pkg_idx

	# shellcheck disable=SC2012
	inst_dir=$(ls -1d "${UPKG_DIR}"/*/* | head -"${PKG_INDEX}" | tail -1)
	find "${inst_dir}" | sed "s,^${UPKG_DIR}/,,"
}

function do_remove()
{
	local inst_dir

	verify_pkg_idx

	# shellcheck disable=SC2012
	inst_dir=$(ls -1d "${UPKG_DIR}"/*/* | head -"${PKG_INDEX}" | tail -1)

	echo -n "Removing package(s) ... "
	rm -rf "${inst_dir}"
	rmdir "${inst_dir%/*}" 2>/dev/null || true
	echo "done"
}

function usage()
{
	cat <<EOF
Usage: upkg [-a ARCH] [-f FLAVOR] [-h] [-x] [-t] COMMAND [ARGUMENTS]

Ubuntu kernel (debug) package manager.

Available commands:
  download PKG_VERSION  Download the packages with packge version PKG_VERSION
                        from the archive.
  install PKG_FILE|PKG_VERSION
                        Install the local package PKG_FILE or download and
                        install the packages with package version PKG_VERSION
                        from the archive.
  list [PKG_INDEX]      List all installed packages or, if PKG_INDEX is
                        specified, the files provided by the package(s) with
                        the index PKG_INDEX.
  remove PKG_INDEX      Remove the package(s) with the index PKG_INDEX.

Optional arguments:
  -a, --arch ARCH      Download the packages for kernel architecture ARCH
                       (defaults to ${ARCH}).
  -f, --flavor FLAVOR  Download the binary package for flavor FLAVOR (defaults
                       to generic).
  -h, --help           Show this help.
  -x, --force          Force an action (only useful with certain commands).
  -t, --target DIR     Target directory for downloaded files (defaults to ./).
EOF
}

# -----------------------------------------------------------------------------
# Main entry point

if [ "$(id -u)" = "0" ] ; then
	echo "Error: You should not run as root" >&2
	exit 1
fi

# upkg root directory
UPKG_DIR=${HOME}/.upkg
[ -d "${UPKG_DIR}" ] || mkdir -p "${UPKG_DIR}"

# Archive download URL
ARCHIVE_URL="https://launchpad.net/ubuntu/+archive/primary/+files/"

ARCH=$(dpkg --print-architecture)
CMD=
FLAVOR=generic
FORCE=0
PKG_FILE=
PKG_INDEX=
PKG_VERSION=
TARGET=./

# Parse the commandline options
while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-a|--arch)
			shift
			ARCH="${1}"
			;;
		-f|--flavor)
			shift
			FLAVOR="${1}"
			;;
		-h|--help)
			usage
			exit
			;;
		-x|--force)
			FORCE=1
			;;
		-t|--target)
			shift
			TARGET="${1}"
			;;
		download|install|list|remove)
			CMD="${1}"
			;;
		*)
			case "${CMD}" in
				download)
					PKG_VERSION="${1}"
					break
					;;
				install)
					if [ -e "${1}" ] ; then
						PKG_FILE="${1}"
					else
						PKG_VERSION="${1}"
					fi
					break
					;;
				list)
					CMD="listfiles"
					PKG_INDEX="${1}"
					break
					;;
				remove)
					PKG_INDEX="${1}"
					break
					;;
				*)
					echo "Error: Unexpected argument: ${1}" >&2
					exit 2
					;;
			esac
			;;
	esac
	shift
done

if [ -z "${CMD}" ] ; then
	usage
	exit 2
fi

do_${CMD}
