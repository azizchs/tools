#!/bin/bash -eu

function out()
{
	local rc=$?

	trap - INT TERM EXIT HUP

	partumount "${BOOT_DIR}" || true
	partumount "${ROOTFS_DIR}" || true
	rmdir "${BOOT_DIR}" "${ROOTFS_DIR}" || true

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function write_to()
{
	if [ "${1}" = "-a" ] ; then
		sudo tee -a "${2}" >/dev/null
	else
		sudo tee "${1}" >/dev/null
	fi
}

function copy_tools()
{
	echo "--- Copy tools"

	# shellcheck disable=SC2230
	sudo cp "$(which collect-rpi-data)" "${ROOTFS_DIR}"/usr/local/bin/
}

function set_hostname()
{
	echo "--- Set hostname"

	# The script that determines the hostname dynamically
	cat <<EOF | write_to "${ROOTFS_DIR}"/usr/local/bin/set-hostname
#!/bin/bash

if ! [ -e /proc/device-tree/model ] ; then
    exit
fi

model=\$(cat /proc/device-tree/model | tr '\0' '\n')
serial=\$(cat /proc/cpuinfo | awk '/^Serial/ { print \$3 }')

hostname=\${model#Raspberry Pi }
hostname=\${hostname/ Rev / rev}
hostname=\${hostname/ Compute Module / cm }
hostname=\${hostname/ Model /}
hostname=\${hostname// /-}
hostname=\${hostname//./d}
hostname=rpi-\${hostname,,}-\${serial: -4}

echo "\${hostname}" > /etc/hostname
hostname "\${hostname}"
EOF
	sudo chmod 755 "${ROOTFS_DIR}"/usr/local/bin/set-hostname

	# Systemd service file
	cat <<EOF | write_to "${ROOTFS_DIR}"/etc/systemd/system/set-hostname.service
# prepare-rpi-image: Set the hostname

[Unit]
Description=Set the hostname
DefaultDependencies=no
Before=network-pre.target
Wants=network-pre.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/set-hostname

[Install]
WantedBy=multi-user.target
EOF

	# Enable the service
	sudo ln -s /etc/systemd/system/set-hostname.service \
		 "${ROOTFS_DIR}"/etc/systemd/system/multi-user.target.wants/set-hostname.service
}

function enable_wifi()
{
	local wifi_ssid wifi_passphrase

	if [ "${WIFI}" -eq 0 ] ; then
		return
	fi

	echo "--- Enable wifi"

	wifi_ssid=$(pass show local/wifi | grep '^ssid: ')
	wifi_ssid=${wifi_ssid#* }

	wifi_passphrase=$(pass show local/wifi | grep '^passphrase: ')
	wifi_passphrase=${wifi_passphrase#* }

	cat <<EOF | write_to "${ROOTFS_DIR}"/etc/netplan/99-prepare-rpi-image.yaml
network:
    wifis:
        wlan0:
            dhcp4: true
            optional: true
            access-points:
                "${wifi_ssid}":
                    password: "${wifi_passphrase}"
EOF
}

function set_kernel_cmdline()
{
	local cmdline_file cmdline opts opt

	echo "--- Set kernel cmdline"

	for cmdline_file in "${BOOT_DIR}"/nobtcmd.txt "${BOOT_DIR}"/cmdline.txt ; do
		if [ -e "${cmdline_file}" ] ; then
			break
		fi
	done

	cmdline=()
	readarray -t opts < <(head -1 "${cmdline_file}" | tr ' ' '\n')
	for opt in "${opts[@]}" ; do
		case "${opt}" in
			console=*|quiet) ;;        # Drop the option
			*) cmdline+=("${opt}") ;;  # Keep the option
		esac
	done
	cmdline+=("earlycon=pl011,0xfe201000" "console=tty1" "console=ttyAMA0,115200")
	echo "${cmdline[*]}" | write_to "${cmdline_file}"

	cat <<EOF | write_to -a "${BOOT_DIR}"/config.txt

# prepare-rpi-image
[all]
enable_uart=1
EOF

	if [ -e "${ROOTFS_DIR}"/etc/default/flash-kernel ] ; then
		cat <<EOF | write_to "${ROOTFS_DIR}"/etc/default/flash-kernel
LINUX_KERNEL_CMDLINE=
LINUX_KERNEL_CMDLINE_DEFAULTS=
EOF
	fi
}

function install_rpi_installer()
{
	local installer_tgz

	echo "--- Install rpi installer"

	cat <<EOF | write_to -a "${BOOT_DIR}"/config.txt

# prepare-rpi-image
[all]
include installcfg.txt
EOF

	# Inject the installer
	installer_tgz=$(pwd)/rpi-installer.tgz
	sudo tar -C "${BOOT_DIR}" --no-same-owner -xaf "${installer_tgz}"
}

function create_prep_script()
{
	echo "--- Create prep script"

	cat <<EOF | write_to "${ROOTFS_DIR}"/usr/local/bin/prepare-rpi-image
#!/bin/bash

echo "--- Waiting for cloud-init to finish"
while ! [ -e /var/lib/cloud/instance/boot-finished ] ; do
    sleep 1
done

echo "--- Setting password"
echo "ubuntu:ubuntu" | chpasswd
EOF
	sudo chmod 755 "${ROOTFS_DIR}"/usr/local/bin/prepare-rpi-image
}

function create_cloud_init_config()
{
	local user

	echo "--- Create cloud-init config"

	user=${SUDO_USER:-${USER}}
	cat <<EOF | \
		write_to "${ROOTFS_DIR}"/etc/cloud/cloud.cfg.d/99-prepare-rpi-image.cfg
# Module ssh
ssh_authorized_keys:
  - $(cat /home/"${user}"/.ssh/id_rsa.pub)

# Module set-password
ssh_pwauth: true

runcmd:
  - /usr/local/bin/prepare-rpi-image &
EOF
}

function disable_services()
{
	local services service

	echo "--- Disable services"

	services=(unattended-upgrades)
	if [ "${SNAPD}" -eq 0 ] ; then
		services+=(snapd)
	fi

	for service in "${services[@]}" ; do
		echo "---   ${service}"
		sudo rm -f "${ROOTFS_DIR}"/etc/init.d/"${service}" \
		     "${ROOTFS_DIR}"/etc/systemd/system/*.wants/"${service}".* \
		     "${ROOTFS_DIR}"/lib/systemd/system/*.wants/"${service}".*
	done
}

function enable_ssh()
{
	local user

	echo "--- Enable ssh"

	sudo ln -s /lib/systemd/system/ssh.service "${ROOTFS_DIR}"/etc/systemd/system/sshd.service
	sudo ln -s /lib/systemd/system/ssh.service "${ROOTFS_DIR}"/etc/systemd/system/multi-user.target.wants/ssh.service

	# Inject the SSH public key
	user=${SUDO_USER:-${USER}}
	if [ -d "${ROOTFS_DIR}"/home/pi ] ; then
		sudo mkdir -p "${ROOTFS_DIR}"/home/pi/.ssh
		write_to "${ROOTFS_DIR}"/home/pi/.ssh/authorized_keys < /home/"${user}"/.ssh/id_rsa.pub
		sudo chmod 700 "${ROOTFS_DIR}"/home/pi/.ssh
		sudo chown -R 1000:1000 "${ROOTFS_DIR}"/home/pi/.ssh
	fi
}

function usage()
{
	cat <<EOF
Usage: prepare-rpi-image [-h] [-s] [-w] IMAGE [OUTFILE]

Prepare an Ubuntu Raspberry Pi image.

Positional arguments:
  IMAGE           The image to prepare.
  OUTFILE         The filename of the prepared image. If not provided, defaults
                  to the original image name with '+prep' appended in the
                  current working directory.

Optional arguments:
  -h, --help      Show this help text and exit.
  -s, --no-snapd  Disable the snapd services.
  -w, --no-wifi   Don't enable wifi.
EOF
}

image=
outfile=
SNAPD=1
WIFI=1

while [ $# -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-s|--no-snapd)
			SNAPD=0
			;;
		-w|--no-wifi)
			WIFI=0
			;;
		*)
			if [ -z "${image}" ] ; then
				image=${1}
			elif [ -z "${outfile}" ] ; then
				outfile=${1}
			else
				usage
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${image}" ] ; then
	usage
	exit 2
fi

if ! [ -e "${image}" ] ; then
	echo "No such image file: ${image}" >&2
	exit 1
fi

if ! [ -e "rpi-installer.tgz" ] ; then
	echo "No such installer: rpi-installer.tgz" >&2
	exit 1
fi

if [ -z "${outfile}" ] ; then
	outfile=${image##*/}
	outfile=${outfile/.img/+prep.img}
fi

echo "--- Copy image"
cp "${image}" "${outfile}"

BOOT_DIR=$(mktemp -d)
ROOTFS_DIR=$(mktemp -d)
trap out INT TERM EXIT HUP

# Mount the boot partition
partmount "${outfile}" 1 "${BOOT_DIR}"
if ! [ -e "${BOOT_DIR}"/config.txt ] ; then
	echo "config.txt not found in boot partition" >&2
	exit 1
fi

# Determine the image vendor
if [ -d "${BOOT_DIR}"/snaps ] ; then
	vendor="core20"
else
	# Mount the rootfs partition
	partmount "${outfile}" 2 "${ROOTFS_DIR}"
	if [ -d "${ROOTFS_DIR}"/system-data ] ; then
		vendor="core18"
	elif [ -e "${ROOTFS_DIR}"/etc/os-release ] ; then
		vendor=$(awk -F= '$1 == "ID" { print $2 }' "${ROOTFS_DIR}"/etc/os-release)
	else
		vendor="unknown"
	fi
fi
echo "--- Vendor is ${vendor}"

case "${vendor}" in
	core*)
		install_rpi_installer
		exit
		;;
	ubuntu)
		enable_wifi
		create_prep_script
		create_cloud_init_config
		;;
	raspbian)
		enable_ssh
		;;
	*)
		echo "Unknown vendor: ${vendor}" >&2
		;;
esac

copy_tools
set_hostname
set_kernel_cmdline
install_rpi_installer
disable_services
