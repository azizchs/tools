#!/bin/bash -eu

function out()
{
	local rc=$?

	trap - INT TERM EXIT HUP

	partumount "${TMP_DIR}"/boot/firmware || true
	partumount "${TMP_DIR}" || true
	rmdir "${TMP_DIR}" || true

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function write_to()
{
	if [ "${1}" = "-a" ] ; then
		sudo tee -a "${2}" >/dev/null
	else
		sudo tee "${1}" >/dev/null
	fi
}

function copy_tools()
{
	# shellcheck disable=SC2230
	sudo cp "$(which collect-rpi-data)" "${TMP_DIR}"/usr/local/bin/
}

function set_hostname()
{
	# The script that determines the hostname dynamically
	cat <<EOF | write_to "${TMP_DIR}"/usr/local/bin/set-hostname
#!/bin/bash

model=\$(cat /proc/device-tree/model | tr '\0' '\n')
serial=\$(cat /proc/cpuinfo | awk '/^Serial/ { print \$3 }')

hostname=\${model#Raspberry Pi }
hostname=\${hostname/ Rev / rev}
hostname=\${hostname/ Compute Module / cm }
hostname=\${hostname/ Model /}
hostname=\${hostname// /-}
hostname=\${hostname//./d}
hostname=rpi-\${hostname,,}-\${serial: -4}

echo "\${hostname}" > /etc/hostname
hostname "\${hostname}"
EOF
	sudo chmod 755 "${TMP_DIR}"/usr/local/bin/set-hostname

	# Systemd service file
	cat <<EOF | write_to "${TMP_DIR}"/etc/systemd/system/set-hostname.service
# prepare-rpi-image: Set the hostname

[Unit]
Description=Set the hostname
DefaultDependencies=no
After=dbus.service
Before=network-pre.target
Wants=network-pre.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/set-hostname

[Install]
WantedBy=multi-user.target
EOF

	# Enable the service
	sudo ln -s /etc/systemd/system/set-hostname.service \
		 "${TMP_DIR}"/etc/systemd/system/multi-user.target.wants/set-hostname.service
}

function enable_wifi()
{
	local wifi_ssid wifi_passphrase

	wifi_ssid=$(pass show local/wifi | grep '^ssid: ')
	wifi_ssid=${wifi_ssid#* }

	wifi_passphrase=$(pass show local/wifi | grep '^passphrase: ')
	wifi_passphrase=${wifi_passphrase#* }

	cat <<EOF | write_to "${TMP_DIR}"/etc/netplan/99-prepare-rpi-image.yaml
network:
    wifis:
        wlan0:
            dhcp4: true
            optional: true
            access-points:
                "${wifi_ssid}":
                    password: "${wifi_passphrase}"
EOF
}

function set_kernel_cmdline()
{
	local cmdline opts opt

	cmdline=()
	readarray -t opts < <(head -1 "${TMP_DIR}"/boot/firmware/cmdline.txt | \
							  tr ' ' '\n')
	for opt in "${opts[@]}" ; do
		if [ "${opt#console=}" = "${opt}" ] ; then
			cmdline+=("${opt}")
		fi
	done
	cmdline+=("console=tty1" "console=ttyS0,115200")
	echo "${cmdline[*]}" | write_to "${TMP_DIR}"/boot/firmware/cmdline.txt

	cat <<EOF | write_to "${TMP_DIR}"/etc/default/flash-kernel
LINUX_KERNEL_CMDLINE=
LINUX_KERNEL_CMDLINE_DEFAULTS=
EOF
}

function install_rpi_installer()
{
	local installer_tgz

	cat <<EOF | write_to -a "${TMP_DIR}"/boot/firmware/config.txt

# prepare-rpi-image
include installcfg.txt
EOF

	# Inject the installer
	installer_tgz=$(pwd)/rpi-installer.tgz
	sudo tar -C "${TMP_DIR}"/boot/firmware/ --no-same-owner -xaf \
		 "${installer_tgz}"
}

function create_prep_script()
{
	cat <<EOF | write_to "${TMP_DIR}"/usr/local/bin/prepare-rpi-image
#!/bin/bash

function do_init()
{
	echo "-- Waiting for cloud-init to finish"
	while ! [ -e /var/lib/cloud/instance/boot-finished ] ; do
		sleep 1
	done

	echo "-- Waiting for apt lock"
	while fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
		sleep 1
	done

	echo "-- Installing and removing packages"
	apt purge -y unattended-upgrades
	apt install -y net-tools

	echo "-- Setting password"
	echo "ubuntu:ubuntu" | chpasswd
}

do_init 2>&1 | \
	awk '{ print strftime("%Y-%m-%d %H:%M:%S -"), \$0 }' | \
	tee -a /var/log/prepare-rpi-image.log
EOF
	sudo chmod 755 "${TMP_DIR}"/usr/local/bin/prepare-rpi-image
}

function create_cloud_init_config()
{
	cat <<EOF | \
		write_to "${TMP_DIR}"/etc/cloud/cloud.cfg.d/99-prepare-rpi-image.cfg
ssh_authorized_keys: [ $(cat ~/.ssh/id_rsa.pub) ]
ssh_pwauth: true

runcmd:
  - prepare-rpi-image &
EOF
}

function usage()
{
	cat <<EOF
Usage: prepare-rpi-image [-h] IMAGE

Prepare an Ubuntu Raspberry Pi image.

Positional arguments:
  IMAGE       The image to prepare.

Optional arguments:
  -h, --help  Show this help text and exit.
EOF
}

image=

while [ $# -gt 0 ] ; do
	case "${1}" in
		-h|--help)
			usage
			exit
			;;
		*)
			if [ -z "${image}" ]; then
				image=${1}
			else
				usage
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${image}" ] ; then
	usage
	exit 2
fi

if ! [ -e "${image}" ] ; then
	echo "No such image file: ${image}" >&2
	exit 1
fi

echo "Copy image"
image_prep=${image/.img/+prep.img}
cp "${image}" "${image_prep}"

TMP_DIR=$(mktemp -d)
trap out INT TERM EXIT HUP

partmount "${image_prep}" 2 "${TMP_DIR}"
partmount "${image_prep}" 1 "${TMP_DIR}"/boot/firmware

copy_tools
set_hostname
enable_wifi
set_kernel_cmdline
install_rpi_installer
create_prep_script
create_cloud_init_config
