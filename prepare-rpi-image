#!/bin/bash -eu

function out()
{
	local rc=$?

	trap - INT TERM EXIT HUP

	partumount "${TMP_DIR}/boot/firmware" || true
	partumount "${TMP_DIR}" || true

	rm -rf "${TMP_DIR}"
	rm -rf "${INITRD_DIR}"

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function write_to()
{
	sudo tee "${1}" >/dev/null
}

image=${1/.img/+prep.img}
cp "${1}" "${image}"

TMP_DIR=$(mktemp -d)
INITRD_DIR=$(mktemp -d)
trap out INT TERM EXIT HUP

# -----------------------------------------------------------------------------
# Mount the image

partmount "${image}" 2 "${TMP_DIR}"
partmount "${image}" 1 "${TMP_DIR}/boot/firmware"

# -----------------------------------------------------------------------------
# Copy collect-rpi-data

# shellcheck disable=SC2230
sudo cp "$(which collect-rpi-data)" "${TMP_DIR}/usr/local/bin/"

# -----------------------------------------------------------------------------
# Create the set-hostname script and service unit file

cat <<EOF | write_to "${TMP_DIR}/usr/local/bin/set-hostname"
#!/bin/bash

model=\$(cat /proc/device-tree/model | tr '\0' '\n')
serial=\$(cat /proc/cpuinfo | awk '/^Serial/ { print \$3 }')

hostname=\${model#Raspberry Pi }
hostname=\${hostname/ Rev / rev}
hostname=\${hostname/ Compute Module / cm }
hostname=\${hostname/ Model /}
hostname=\${hostname// /-}
hostname=\${hostname//./d}
hostname=rpi-\${hostname,,}-\${serial: -4}

hostnamectl set-hostname "\${hostname}"
EOF
sudo chmod 755 "${TMP_DIR}/usr/local/bin/set-hostname"

cat <<EOF | write_to "${TMP_DIR}/etc/systemd/system/set-hostname.service"
# prepare-rpi-image: Set the hostname

[Unit]
Description=Set the hostname
DefaultDependencies=no
After=dbus.service
Before=network-pre.target
Wants=network-pre.target

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/local/bin/set-hostname

[Install]
WantedBy=multi-user.target
EOF

# -----------------------------------------------------------------------------
# Create the wifi netplan config file

wifi_ssid=$(pass show local/wifi | grep '^ssid: ')
wifi_ssid=${wifi_ssid#* }

wifi_passphrase=$(pass show local/wifi | grep '^passphrase: ')
wifi_passphrase=${wifi_passphrase#* }

cat <<EOF | write_to "${TMP_DIR}/etc/netplan/99-prepare-rpi-image.yaml"
network:
    wifis:
        wlan0:
            dhcp4: true
            optional: true
            access-points:
                "${wifi_ssid}":
                    password: "${wifi_passphrase}"
EOF

# -----------------------------------------------------------------------------
# Modify the kernel commandline

cmdline=()
readarray -t opts < <(head -1 "${TMP_DIR}/boot/firmware/cmdline.txt")
for opt in "${opts[@]}" ; do
	if [ "${opt#console=}" != "${opt}" ] ; then
		cmdline+=("${opt}")
	fi
done
cmdline+=("console=tty1" "console=ttyS0,115200")
echo "${cmdline[*]}" | write_to "${TMP_DIR}/boot/firmware/cmdline.txt"

cat <<EOF | write_to "${TMP_DIR}/etc/default/flash-kernel"
LINUX_KERNEL_CMDLINE=
LINUX_KERNEL_CMDLINE_DEFAULTS=
EOF

# -----------------------------------------------------------------------------
# Modify flash-kernel to support booting an installer kernel/initrd via GPIO

cat <<EOF | write_to "${TMP_DIR}/etc/flash-kernel/bootscript/bootscr.rpi.new"
# Inserted by prepare-rpi-image
if gpio input 4; then
  setenv kernel_img installz
  setenv initrd_img install.img
else
  setenv kernel_img vmlinuz
  setenv initrd_img initrd.img
fi

$(sed -e "s,vmlinuz,\${kernel_img}," -e "s,initrd.img,\${initrd_img}," \
	 "${TMP_DIR}/etc/flash-kernel/bootscript/bootscr.rpi")
EOF
sudo mv "${TMP_DIR}/etc/flash-kernel/bootscript/bootscr.rpi.new" \
	 "${TMP_DIR}/etc/flash-kernel/bootscript/bootscr.rpi"

# Inject the installer kernel and initrd
sudo cp installz install.img "${TMP_DIR}/boot/firmware/"

# -----------------------------------------------------------------------------
# Create the prepare-rpi-image script

cat <<EOF | write_to "${TMP_DIR}/usr/local/bin/prepare-rpi-image"
#!/bin/bash

function do_init()
{
	echo "-- Waiting for cloud-init to finish"
	while ! [ -e /var/lib/cloud/instance/boot-finished ] ; do
		sleep 1
	done

	echo "-- Waiting for apt lock"
	while fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
		sleep 1
	done

	echo "-- Installing and removing packages"
	apt purge -y unattended-upgrades
	apt install -y net-tools

	echo "-- Setting password"
	echo "ubuntu:ubuntu" | chpasswd

	echo "-- Enabling set-hostname.service"
	systemctl enable set-hostname.service

	echo "-- Running flash-kernel"
	flash-kernel

	echo "-- Rebooting"
	reboot
}

do_init 2>&1 | \
	awk '{ print strftime("%Y-%m-%d %H:%M:%S -"), \$0 }' | \
	tee -a /var/log/prepare-rpi-image.log
EOF
sudo chmod 755 "${TMP_DIR}/usr/local/bin/prepare-rpi-image"

# -----------------------------------------------------------------------------
# Create the cloud-config config snippet

cat <<EOF | write_to "${TMP_DIR}/etc/cloud/cloud.cfg.d/99-prepare-rpi-image.cfg"
ssh_authorized_keys: [ $(cat ~/.ssh/id_rsa.pub) ]
ssh_pwauth: true

runcmd:
  - prepare-rpi-image &
EOF
