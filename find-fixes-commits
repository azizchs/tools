#!/bin/bash -eu
#
# Helper script for trying to find 'Fixes' commits
#

export GIT_PAGER=


# -----------------------------------------------------------------------------
# Show script usage

function usage()
{
    cat <<EOF
Usage: find-fixes-commits [<options>] <commit>

Options:
  -b, --branch BRANCH   Try to find the 'Fixes:' commit(s) on branch BRANCH
  -v, --verbose         Increase output verbosity.
EOF
    exit 2
}


# -----------------------------------------------------------------------------
# Find a 'Fixes:' commit

function find_fixes()
{
	local commit=${1}
	local branch=${2}
	local branch_commit fixes_line fixes_commit

#	if [ ${verbose} -eq 1 ] ; then
#		echo "Commit ${commit}, branch: ${branch}"
#	fi

	while read -r branch_commit ; do
		while IFS= read -r fixes_line ; do
			fixes_commit=$(echo "${fixes_line}" | \
							   grep -o -e '\b[0-9a-f]\{7,\}\b' | \
							   head -1)
			# Expand the 'Fixes: ' commit hash
			fixes_commit=$(git rev-parse "${fixes_commit}" 2>/dev/null || echo)
			if [ "${fixes_commit}" = "${commit}" ] ; then
				echo "Fixes ${commit:0:12} (${branch}):" \
					 "${branch_commit:0:12}" \
					 "(\"$(git log --format=%s -1 "${branch_commit}")\")"
				find_fixes "${branch_commit}" "${branch}"
			elif [ -z "${fixes_commit}" ] && [ "${VERBOSE}" -eq 1 ] ; then
				echo "Unknown revision: ${fixes_commit:0:12}" \
					 "(${fixes_line})" >&2
			fi
		done < <(git log --format=%b -1 "${branch_commit}" | grep '^Fixes: ')
	done < <(git log --format=%H "${branch}" | sed "/${commit}/q")
}

# -----------------------------------------------------------------------------
# Main entry point

BRANCH=
COMMIT=
VERBOSE=0

while [ ${#} -gt 0 ] ; do
    case "${1}" in
		-v|--verbose)
			VERBOSE=1
			;;
		-b|--branch)
			shift
			BRANCH=${1}
			;;
        *)
			if [ -n "${COMMIT}" ] ; then
				echo "Unexpected argument: ${1}"
				exit 1
			fi
            COMMIT=${1}
            ;;
    esac
    shift
done

[ -n "${COMMIT}" ] || usage

# Expand the provided commit hash
commit=$(git rev-parse "${COMMIT}")

if [ -n "${BRANCH}" ] ; then
	find_fixes "${commit}" "${BRANCH}"
else
	# Cycle through all branches that contain the given commit
	while read -r branch ; do
		find_fixes "${commit}" "${branch}"
	done < <(git branch --contains "${commit}" | sed -e 's,.* ,,')
fi
