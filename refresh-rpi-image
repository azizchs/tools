#!/bin/bash -eu
#
# Download and prepare Raspberry Pi images
#

function out()
{
	local rc=$?

	trap - EXIT INT TERM HUP

	if [ "${rc}" -ne 0 ] ; then
		echo "Script failed" >&2
	fi

	exit "${rc}"
}

function download_image()
{
	local release=${1} arch=${2}
	local release_dir flavor

	echo "--- Downloading image"

	if [ "${arch}" != "armhf" ] && [ "${arch}" != "arm64" ] ; then
		echo "Invalid architecture: ${arch}" >&2
		exit 1
	fi

	# Defaults
	release_dir=${release}
	flavor=raspi

	case "${release}" in
		groovy)
			release_dir=
			;;
		bionic|core18)
			flavor=raspi3
			;;
	esac

	case "${release}" in
		bionic|focal|groovy)
			IMAGE=${release}-preinstalled-server-${arch}+${flavor}.img
			wget -O "${IMAGE}".xz http://cdimage.ubuntu.com/ubuntu-server/"${release_dir}"/daily-preinstalled/current/"${IMAGE}".xz
			unxz -f "${IMAGE}".xz
			;;
		core18|core20)
			IMAGE=ubuntu-core-${release#core}-${arch}+${flavor}.img
			wget -O "${IMAGE}".xz http://cdimage.ubuntu.com/ubuntu-core/"${release}"/beta/current/"${IMAGE}".xz
			unxz -f "${IMAGE}".xz
			;;
		raspios)
			IMAGE=raspios-lite-${arch}.img
			wget -O "${IMAGE}".zip https://downloads.raspberrypi.org/raspios_lite_"${arch}"_latest
			unzip -o "${IMAGE}".zip
			mv 20*-raspios-*.img "${IMAGE}"
			rm -f "${IMAGE}".zip
			;;
		*)
			echo "Invalid release: ${release}" >&2
			exit 1
			;;
	esac
}

function usage()
{
	cat <<EOF
Usage: refresh-rpi-image [-h] [-i] IMAGE

Download and prepare a Raspberry Pi image.

Positional argument:
  IMAGE            The image to prepare. If it's an existing image file then
                   that image is prepared, otherwise the image is  downloaded
                   first. In that case, IMAGE needs to be in the form
                   <release>-<arch>, like focal-arm64, core18-armhf,
                   raspios-armhf, ...

Optional arguments:
  -h, --help       Show this help text and exit.
  -i, --installer  Create an rpi installer using the downloaded image.
EOF
}

IMAGE=
installer=0

while [ $# -gt 0 ] ; do
    case "${1}" in
		-h|--help)
			usage
			exit
			;;
		-i|--installer)
			installer=1
			;;
		*)
			if [ -z "${IMAGE}" ] ; then
				IMAGE=${1}
			else
				echo "Invalid argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${IMAGE}" ] ; then
	usage >&2
	exit 2
fi

trap out EXIT INT TERM HUP

if ! [ -e "${IMAGE}" ] ; then
	release=${IMAGE%-*}
	arch=${IMAGE#*-}
	download_image "${release}" "${arch}"
fi

if [ "${installer}" -eq 1 ] ; then
	echo "--- Creating installer"
	create-rpi-installer "${IMAGE}"
fi

echo "--- Preparing image"
image_prep=${IMAGE%.img}+prep.img
prepare-rpi-image "${IMAGE}" "${image_prep}"
gzip -f "${image_prep}"

echo "Created image: ${image_prep}.gz"
