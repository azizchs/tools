#!/bin/bash -eu
#
# Create an LV containing the root fs of a cloud image for multi-boot
#

function out()
{
	local rc=$?

	trap - EXIT INT TERM HUP
	set +e

	if [ -n "${MOUNTP}" ] ; then
		if [ -e "${MOUNTP}"/etc/resolv.conf.orig ] ; then
			mv "${MOUNTP}"/etc/resolv.conf.orig "${MOUNTP}"/etc/resolv.conf
		fi
		unmount_lv_device
	fi

	if [ "${rc}" -ne 0 ] ; then
		pr_error "Error: Script failed"
	fi

	exit "${rc}"
}

function pr_error()
{
	echo -e "\e[31m${*}\e[0m" 1>&2

}

function pr_info()
{
	echo -e "\e[33m${*}\e[0m"
}

function download_image()
{
	local image url suffix

	suffix=
	case "${RELEASE}" in
		precise|trusty|xenial)
			suffix=-disk1
			;;
	esac

	image=${RELEASE}-server-cloudimg-${ARCH}${suffix}.img
	url=https://cloud-images.ubuntu.com/${RELEASE}/current/${image}

	IMAGE=${image}.raw

	if [ -e "${IMAGE}" ] && [ "${DOWNLOAD}" -eq 0 ] ; then
		return
	fi

	pr_info "Download cloud image"
	wget -O "${image}" "${url}"
	qemu-img convert -O raw "${image}" "${IMAGE}"
	rm -f "${image}"
}

function create_lv_device()
{
	if [ -e "${LV_DEVICE}" ] ; then
		if [ "${FORCE}" -eq 0 ] ; then
			pr_error "Error: LV ${LV_DEVICE} exists already."
			pr_error "       Use -f, --force to recreate it."
			exit 1
		fi
		pr_info "Remove ${LV_DEVICE}"
		lvremove -f "${LV_DEVICE}"
	fi

	pr_info "Create ${LV_DEVICE}"
	lvcreate --yes --name "${LV_NAME}" --size 10G "${VG_NAME}"
}

function copy_rootfs()
{
	local start_count start count

	# Get the start sector and sector count of the root partition
	start_count=$(sfdisk -l -o Start,Sectors,Type "${IMAGE}" | \
					  awk '/ Linux/ { print $1 " " $2 }') 
	start=${start_count% *}
	count=${start_count#* }

	pr_info "Copy root filesystem to ${LV_DEVICE}"
	dd ibs=512 skip="${start}" count="${count}" if="${IMAGE}" of="${LV_DEVICE}"

	pr_info "Set label on ${LV_DEVICE}"
}

function mount_lv_device()
{
	local mountp dev

	pr_info "Mount ${LV_DEVICE}"
	mountp=$(mktemp -d)
	mount "${LV_DEVICE}" "${mountp}"
	MOUNTP=${mountp}

	for dev in /dev /proc /sys ; do
		mount -o bind "${dev}" "${MOUNTP}${dev}"
	done
}

function unmount_lv_device()
{
	local dev

	pr_info "Unmount ${LV_DEVICE}"

	for dev in /dev /proc /sys ; do
		umount "${MOUNTP}${dev}" || umount -l "${MOUNTP}${dev}"
	done

	umount "${MOUNTP}" || umount -l "${MOUNTP}"
	rmdir "${MOUNTP}"
}

function fix_resolv_conf()
{
	if [ -e "${CONFIGD}"/resolv.conf ] ; then
		echo "Fix resolv.conf temporarily"
		mv "${MOUNTP}"/etc/resolv.conf "${MOUNTP}"/etc/resolv.conf.orig
		cp "${CONFIGD}"/etc/resolv.conf "${MOUNTP}"/etc/
	fi
}

function blacklist_modules()
{
	local files

	readarray -t files < <(find "${CONFIGD}"/ -type f -name 'blacklist-*.conf')
	if [ "${#files[@]}" -eq 0 ] ; then
		return
	fi

	pr_info "Blacklist modules"
	cp "${files[@]}" "${MOUNTP}"/etc/modprobe.d/

	pr_info "Update the initramfs"
	chroot "${MOUNTP}" update-initramfs -k all -u
}

function create_fstab()
{
	local rootfs

	rootfs=$(grep 'LABEL=cloudimg-rootfs' "${MOUNTP}"/etc/fstab)
	if [ -z "${rootfs}" ] ; then
		return
	fi

	pr_info "Recreate etc/fstab"
	rootfs=${LV_DEVICE}${rootfs#*LABEL=cloudimg-rootfs}
	cat <<EOF > "${MOUNTP}"/etc/fstab
${rootfs}
${LV_HOME}   /home   ext4   defaults   0   2
${LV_SWAP}   none    swap   sw         0   0
EOF
}

function configure_grub()
{
	pr_info "Create usr/local/sbin/update-grub"
	cat <<EOF > "${MOUNTP}"/usr/local/sbin/update-grub
#!/bin/bash
/usr/sbin/update-grub "\${@}"
echo "Copy grub.cfg to ${LV_BOOT}"
mount ${LV_BOOT} /mnt/boot/
cp /boot/grub/grub.cfg /mnt/boot/grub/grub-${RELEASE}-${ARCH}.cfg
umount /mnt/boot/ || umount -l /mnt/boot
EOF
	chmod 755 "${MOUNTP}"/usr/local/sbin/update-grub
	test -d "${MOUNTP}"/mnt/boot || mkdir -p "${MOUNTP}"/mnt/boot

	pr_info "Create etc/default/grub.d/99-create-cloud-lv.cfg" 
	test -d "${MOUNTP}"/etc/default/grub.d || \
		mkdir "${MOUNTP}"/etc/default/grub.d

	cat <<EOF > "${MOUNTP}"/etc/default/grub.d/99-create-cloud-lv.cfg
unset GRUB_HIDDEN_TIMEOUT GRUB_TIMEOUT_STYLE GRUB_FORCE_PARTUUID
GRUB_TIMEOUT=10
GRUB_CMDLINE_LINUX_DEFAULT="earlyprintk=ttyS0,115200 console=ttyS0,115200 console=tty0 loglevel=7"
GRUB_TERMINAL="console serial"
GRUB_SERIAL_COMMAND="serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1"
GRUB_DISTRIBUTOR="Ubuntu ${RELEASE^} ${ARCH}"
GRUB_DISABLE_OS_PROBER=true
EOF

	pr_info "Update grub"
	chroot "${MOUNTP}" update-grub
}

function configure_cloud_init()
{
	local seedd timezone

	seedd="${MOUNTP}"/var/lib/cloud/seed/nocloud
	test -d "${seedd}" || mkdir -p  "${seedd}"

	pr_info "Create var/${seedd#*/var/}/meta-data"
	cat <<EOF > "${seedd}"/meta-data
instance-id: ubuntu-${RELEASE}-${ARCH}
local-hostname: $(hostname | tr -d '\n')
EOF

	pr_info "Create var/${seedd#*/var/}/user-data"
	# shellcheck disable=SC2002
	timezone=$(cat /etc/timezone | tr -d '\n')
	cat <<EOF > "${seedd}"/user-data
#cloud-config
locale: ${LANG:-en_US.UTF-8}
timezone: ${timezone}
password: ubuntu
chpasswd: { expire: False }
ssh_pwauth: True
manage_etc_hosts: True
EOF

	pr_info "Configure cloud-init datasource"
	rm -f "${MOUNTP}"/etc/cloud/cloud.cfg.d/*dpkg.cfg
	chroot "${MOUNTP}" bash -c "echo 'cloud-init cloud-init/datasources multiselect NoCloud' | debconf-set-selections ; dpkg-reconfigure -f noninteractive cloud-init"

	pr_info "Clean cloud-init"
	if [ "${RELEASE}" = "precise" ] || [ "${RELEASE}" = "trusty" ] ; then
		rm -rf "${MOUNTP}"/var/lib/cloud
	else
		chroot "${MOUNTP}" cloud-init clean
	fi
}

function add_user_group()
{
	local sudo_group

	if [ -z "${SUDO_USER:-}" ] || grep -qP "^${SUDO_USER:-}:" \
									   "${MOUNTP}"/etc/passwd ; then
		return
	fi

	sudo_group=$(id -g "${SUDO_GID}" -n)
	pr_info "Add group ${sudo_group}"
	chroot "${MOUNTP}" addgroup --gid "${SUDO_GID}" "${sudo_group}"

	pr_info "Add user ${SUDO_USER}"
	chroot "${MOUNTP}" adduser --gid "${SUDO_GID}" --uid "${SUDO_UID}" \
		   --gecos "" --disabled-password --no-create-home "${SUDO_USER}"

	pr_info "Create etc/sudoers.d/${SUDO_USER}"
	echo "${SUDO_USER} ALL = NOPASSWD: ALL" > \
		 "${MOUNTP}"/etc/sudoers.d/"${SUDO_USER}"
	chmod 440 "${MOUNTP}"/etc/sudoers.d/"${SUDO_USER}"
}

function add_apt_repos()
{
	local files keyids keyid

	readarray -t files < <(find "${CONFIGD}"/ -type f -name '*.list')
	if [ "${#files[@]}" -eq 0 ] ; then
		return
	fi

	pr_info "Add APT repos"
	cp "${files[@]}" "${MOUNTP}"/etc/apt/sources.list.d/

	# Download the PPA public keys
	readarray -t keyids < <(awk '/PPA public key/ { print $NF }' \
								"${MOUNTP}"/etc/apt/sources.list.d/*.list)
	for keyid in "${keyids[@]}" ; do
		chroot "${MOUNTP}" apt-key adv --keyserver keyserver.ubuntu.com \
			   --recv-key "${keyid}"
	done
}

function install_packages()
{
	local virtual kernel debs

	if [ "${RELEASE}" = "precise" ] ; then
		pr_info "Install additional packages for Precise"

		readarray -t virtual < <(chroot "${MOUNTP}" dpkg -l | \
									 awk '$2 ~ /^linux-.*virtual$/ { print $2 }')

		# For Precise we need to install lvm2 and dkms and replace
		# linux-virtual with linux-generic
		chroot "${MOUNTP}" apt-get update
		chroot "${MOUNTP}" apt-get install -y lvm2 linux-generic dkms
		chroot "${MOUNTP}" apt-get purge -y "${virtual[@]}"
		chroot "${MOUNTP}" apt-get autoremove -y --purge

	elif [ "${RELEASE}" = "trusty" ] ; then
		pr_info "Install additional packages for Trusty"

		# For Trusty we need to install linux-modules-extra
		# shellcheck disable=SC2012
		kernel=$(ls -1 "${MOUNTP}"/boot/initrd.img-* | sort -V | tail -1 | \
					 sed 's,.*/initrd.img-,,')

		chroot "${MOUNTP}" apt update
		chroot "${MOUNTP}" apt install -y lvm2 "linux-modules-extra-${kernel}"
	fi

	# Install local packages
	readarray -t debs < <(find "${CONFIGD}"/ -type f -name '*.deb')
	if [ "${#debs[@]}" -gt 0 ] ; then
		pr_info "Install local packages"
		rm -rf "${MOUNTP}"/var/tmp/*.deb
		cp "${debs[@]}" "${MOUNTP}"/var/tmp/
		chroot "${MOUNTP}" bash -c 'dpkg -i /var/tmp/*.deb'
	fi
}

function usage()
{
	cat <<EOF
Usage: $(basename "${0}") [-a ARCH] [-f] [-h] [-r] RELEASE

Create a logical volume from a cloud image.

Positional arguments:
  RELEASE  The release name of an Ubuntu cloud image (xenial, bionic, ...).

Optional arguments:
  -a, --arch ARCH  The architecture of the cloud image to use.
  -d, --download   Download a new cloud image.
  -f, --force      Recreate an existing logical volume.
  -h, --help       Show this help text and exit.
  -r, --reconfig   Reconfigure an existing logical volume.
EOF
}

ARCH=$(dpkg --print-architecture)
DOWNLOAD=0
FORCE=0
RECONFIG=0
RELEASE=

while [ ${#} -gt 0 ] ; do
	case "${1}" in
		-a|--arch)
			shift
			ARCH=${1}
			;;
		-d|--download)
			DOWNLOAD=1
			;;
		-f|--force)
			FORCE=1
			;;
		-h|--help)
			usage
			exit
			;;
		-r|--reconfig)
			RECONFIG=1
			;;
		-*)
			pr_error "Error: Unexpected argument: ${1}" >&2
			exit 2
			;;
		*)
			if [ -z "${RELEASE}" ] ; then
				RELEASE=${1}
			else
				pr_error "Error: Unexpected argument: ${1}" >&2
				exit 2
			fi
			;;
	esac
	shift
done

if [ -z "${RELEASE}" ] ; then
	usage
	exit 2
fi

# Globals
IMAGE=
MOUNTP=
VG_NAME=vg0

LV_NAME=${RELEASE}
if [ "${ARCH}" != "$(dpkg --print-architecture)" ] ; then
	LV_NAME=${LV_NAME}_${ARCH}
fi
LV_DEVICE=/dev/mapper/${VG_NAME}-${LV_NAME}
LV_HOME=/dev/mapper/${VG_NAME}-home
LV_SWAP=/dev/mapper/${VG_NAME}-swap
LV_BOOT=/dev/mapper/${VG_NAME}-boot
CONFIGD=create-cloud-lv.d/$(hostname)/${RELEASE}

trap out EXIT INT TERM HUP

if [ "${RECONFIG}" -eq 0 ] ; then
	# Download the cloud image
	download_image

	# Create the LV and copy the root filesystem
	create_lv_device
	copy_rootfs
fi

# Mount the LV
mount_lv_device

# Configure the LV
fix_resolv_conf
blacklist_modules
create_fstab
configure_grub
configure_cloud_init
add_user_group
add_apt_repos
install_packages
